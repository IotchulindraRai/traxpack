// Prisma schema file for the luggage tracking system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents a registered user in the system
model AppUser {
  id                String          @id @default(cuid())
  fullName          String?
  emailAddress      String          @unique
  emailConfirmedAt  DateTime?
  avatarUrl         String?
  hashedPassword    String?
  userRole          UserRole        @default(USER)
  externalAccounts  ExternalAccount[]
  isTwoFactorActive Boolean         @default(false)
  twoFactorDetails  TwoFactorDetails?
  luggageRecords    LuggageRecord[]
}

// Enum defining user roles: basic USER or ADMIN
enum UserRole {
  USER
  ADMIN
}

// Stores details of accounts from third-party providers (OAuth)
model ExternalAccount {
  id                String          @id @default(cuid())
  appUserId         String
  accountType       String
  providerName      String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  tokenExpiration   Int?
  tokenType         String?
  userScope         String?
  idToken           String? @db.Text
  sessionState      String?

  appUser AppUser @relation(fields: [appUserId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerAccountId])
}

// Verification tokens for email validation
model EmailVerificationToken {
  id                String    @id       @default(cuid())
  emailAddress      String
  verificationToken String    @unique
  tokenExpiresAt    DateTime

  @@unique([emailAddress, verificationToken])
}

// Tokens for password reset requests
model ResetPasswordToken {
  id                String    @id      @default(cuid())
  emailAddress      String
  resetToken        String    @unique
  tokenExpiresAt    DateTime

  @@unique([emailAddress, resetToken])
}

// Tokens for two-factor authentication
model TwoFactorAuthToken {
  id                String    @id      @default(cuid())
  emailAddress      String
  authToken         String    @unique
  tokenExpiresAt    DateTime

  @@unique([emailAddress, authToken])
}

// Represents confirmation of two-factor authentication for a user
model TwoFactorDetails {
  id                String    @id      @default(cuid())
  appUserId         String
  appUser           AppUser   @relation(fields: [appUserId], references: [id], onDelete: Cascade)

  @@unique([appUserId])
}

// Records the luggage associated with a user, identified by RFID
model LuggageRecord {
  id                String    @id      @default(cuid())
  appUserId         String
  luggageRfid       String    @unique
  luggageLabel      String
  appUser           AppUser   @relation(fields: [appUserId], references: [id], onDelete: Cascade)
}
